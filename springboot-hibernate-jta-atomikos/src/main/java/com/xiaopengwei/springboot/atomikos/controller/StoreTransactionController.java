package com.xiaopengwei.springboot.atomikos.controller;import com.xiaopengwei.springboot.atomikos.entity.customer.Customer;import com.xiaopengwei.springboot.atomikos.entity.order.Order;import com.xiaopengwei.springboot.atomikos.service.StoreService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.util.Assert;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import java.util.HashMap;import java.util.Map;/** * <p> * 事务测试控制器 * </p> * * @author github.com/xpwi * @since 2019-04-13 */@RestController@RequestMapping("/atomikos/store")public class StoreTransactionController {    @Autowired    private StoreService storeService;    /**     * 无错误的操作     *     * @return java.lang.Object     * @author github.com/xpwi     */    @RequestMapping(value = "/test")    public Object test() {        Map<String, Object> result = new HashMap<String, Object>();        try {            //模拟客户            Customer customer = new Customer();            customer.setName("xiaopengwei");            customer.setAge(10);            //下单            Order order = new Order();            order.setCode(1);            order.setQuantity(7);            storeService.store(customer, order);            //判断是否为空，非空即成功            Assert.notNull(customer.getId());            Assert.notNull(order.getId());            result.put("status", "0");        } catch (Exception e) {            e.printStackTrace();            result.put("status", "1");            result.put("msg", e.getMessage());        }        return result;    }    /**     * 参数含有空的值，数据库不允许为空     *     * @return java.lang.Object     * @author github.com/xpwi     */    @RequestMapping(value = "/testWithNull")    public Object store() {        Map<String, Object> result = new HashMap<String, Object>();        try {            //模拟客户            Customer customer = new Customer();            customer.setName("xiaopengwei");            customer.setAge(20);            //下单            Order order = new Order();            //非空属性 order.setCode(1);            order.setQuantity(7);            storeService.store(customer, order);            //判断是否为空，非空即成功            Assert.notNull(customer.getId());            Assert.notNull(order.getId());            result.put("status", "0");        } catch (Exception e) {            e.printStackTrace();            result.put("status", "1");            result.put("msg", e.getMessage());        }        return result;    }    /**     * 测试业务逻辑层带有异常     *     * @param     * @return java.lang.Object     * @author github.com/xpwi     */    @RequestMapping(value = "/testWithException")    public Object storeWithException() {        Map<String, Object> result = new HashMap<String, Object>();        try {            //模拟客户            Customer customer = new Customer();            customer.setName("xiaopengwei");            customer.setAge(30);            //下单            Order order = new Order();            order.setCode(1);            order.setQuantity(7);            storeService.storeWithStoreException(customer, order);            //判断是否为空            Assert.notNull(customer.getId());            Assert.notNull(order.getId());            result.put("status", "0");        } catch (Exception e) {            e.printStackTrace();            result.put("status", "1");            result.put("msg", e.getMessage());        }        return result;    }    @RequestMapping(value = "/save")    public Object save() {        Map<String, Object> result = new HashMap<String, Object>();        try {            storeService.transfer();            //storeService.transferWithStoreException();            result.put("status", "0");        } catch (Exception e) {            e.printStackTrace();            result.put("status", "1");            result.put("msg", e.getMessage());        }        return result;    }}